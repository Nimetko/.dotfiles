{
    "editor.formatOnSave": true,
    "editor.suggest.insertMode": "replace",
    "terminal.integrated.fontFamily": "MesloLGS NF",
    "editor.linkedEditing": true,
    "javascript.updateImportsOnFileMove.enabled": "always",
    "window.zoomLevel": 1,
    "launch": {},
    "[json]": {},
    "editor.minimap.enabled": false,
    "workbench.iconTheme": "material-icon-theme",
    "update.showReleaseNotes": false,
    "zenMode.hideLineNumbers": false,
    "editor.lineNumbers": "relative",
  
    "vim.leader": "<Space>",
    "vim.hlsearch": true,
    "vim.normalModeKeyBindingsNonRecursive": [
      // NAVIGATION
      // switch b/w buffers
      { "before": ["<S-j>"], "commands": [":bprevious"] },
      { "before": ["<S-k>"], "commands": [":bnext"] },
  
      // splits
      { "before": ["leader", "v"], "commands": [":vsplit"] },
      // { "before": ["leader", "s"], "commands": [":split"] },
  
      // panes
      {
        "before": ["leader", "h"],
        "commands": ["workbench.action.focusLeftGroup"]
      },
      {
        "before": ["leader", "j"],
        "commands": ["workbench.action.focusBelowGroup"]
      },
      {
        "before": ["leader", "k"],
        "commands": ["workbench.action.focusAboveGroup"]
      },
      {
        "before": ["leader", "l"],
        "commands": ["workbench.action.focusRightGroup"]
      },

      // FILE TREE
      {
        "before": ["leader", "n", "f"],
        // "before": ["C-n"],
        "commands": ["workbench.explorer.fileView.focus"]
      },
      //git
      {
        "before": ["leader", "g", "s"],
        "commands": ["workbench.view.scm"]
      },
{
"key": "ctrl+n",
"command": "explorer.newFile",
"when": "explorerViewletFocus"
},
{
"key": "ctrl+shift+n",
"command": "explorer.newFolder",
"when": "explorerViewletFocus"
},
{
},
// test
    {
      "key":["leader", "t", "J"],
      // "command": "workbench.action.tasks.test"
      "command": "workbench.action.tasks.reRunTask"
    },
    // flutter hotReload
        // {
    //   "key":["leader", "f", "R"],
    //     "command": "flutter.hotReload",
    //     "when": "editorTextFocus"
    // },
    //     {
    //   "key":["leader", "f", "r"],
    //     "command": "flutter.reload",
    //     "when": "editorTextFocus"
    // },

      // NICE TO HAVE
      { "before": ["leader", "w"], "commands": [":w!"] },
      { "before": ["leader", "q"], "commands": [":q!"] },
      { "before": ["leader", "x"], "commands": [":x!"] },
      {
        "before": ["[", "d"],
        "commands": ["editor.action.marker.prev"]
      },
      {
        "before": ["]", "d"],
        "commands": ["editor.action.marker.next"]
      },
      {
        "before": ["<leader>", "c", "a"],
        "commands": ["editor.action.quickFix"]
      },
      {
        "before": ["<leader>", "c", "e"],
        "commands": ["editor.action.showErrorsWarnings"]
      },
      // go to next error in all files
      {
        // "before": ["<leader>", "c", "n"],
        "before": ["[", "d"],
        "commands": ["editor.action.marker.nextInFiles"]
      },
      // go to previous error in all files
      {
        "before": ["]", "d"],
        "commands": ["editor.action.marker.prevInFiles"]
      },

      // go to next error in current file
      {
        "before": ["<leader>", "c", "n"],
        "commands": ["editor.action.marker.next"]
      },
      // go to previous error in current file
      {
        "before": ["<leader>", "c", "p"],
        "commands": ["editor.action.marker.prev"]
      }, 
      {
        "before": ["<leader>", "v", "r"],
        "commands": ["editor.action.rename"]
      },
      { "before": ["<C-p>"], "commands": ["workbench.action.quickOpen"] },
      { "before": ["leader", "p"], "commands": ["editor.action.formatDocument"] },
      {
        "before": ["g", "h"],
        // "before": ["K"], // can't be this, it's already used for moving between panes
        "commands": ["editor.action.showDefinitionPreviewHover"]
      },
      // My custom changes
      // { "before": ["leader", "/"], "commands": ["editor.action.commentLine"] },
      { "before": ["g", "c"], "commands": ["editor.action.commentLine"] },

      { "before": ["leader", "m"], "commands": ["editor.foldAllMarkerRegions"] },
      { "before": ["leader", "n"], "commands": ["editor.unfoldAllMarkerRegions"] },

      // Replace
      { "before": ["leader", "s"], "commands": ["editor.action.startFindReplaceAction"] },
    ],
    "vim.visualModeKeyBindings": [
      // Stay in visual mode while indenting
      { "before": ["<"], "commands": ["editor.action.outdentLines"] },
      { "before": [">"], "commands": ["editor.action.indentLines"] },
      // Move selected lines while staying in visual mode
      { "before": ["J"], "commands": ["editor.action.moveLinesDownAction"] },
      { "before": ["K"], "commands": ["editor.action.moveLinesUpAction"] },
      // toggle comment selection
      { "before": ["leader", "c"], "commands": ["editor.action.commentLine"] }
    ],
    "[typescriptreact]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "go.toolsManagement.autoUpdate": true,
    "[typescript]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[jsonc]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "window.commandCenter": false,
    "workbench.activityBar.location": "hidden",

    // Custom Window management like in vim. Limit opened windows to 1. 

    // "workbench.editor.enablePreview": false,
    // "workbench.editor.enablePreviewFromQuickOpen": false,
    // "workbench.editor.showTabs": false,
    // "workbench.editor.tabCloseButton": "off",
    // "workbench.editor.tabSizing": "shrink",
    
    // From chatGPT
    // "workbench.editor.enablePreview": true,
    // "workbench.editor.enablePreviewFromQuickOpen": true,
    // "workbench.editor.limit.enabled": true,
    // // Optionally, you can set the limit number
    // "workbench.editor.limit.perEditorGroup": 1, // Example: limit to 3 editors

    "workbench.editor.limit.enabled": true,
    "workbench.editor.limit.value": 5,
    "git.openRepositoryInParentFolders": "always",
    "diffEditor.ignoreTrimWhitespace": false,
    "zenMode.showTabs": "single",
  }
